from __future__ import unicode_literals

from django.db import models

class Router(object):
    def db_for_read(self, model, **hints):
        if model._meta.app_label == 'cat':
            return 'cosmo'
        return None
    db_for_write = db_for_read

#########################################
# Below here generated by:
# python manage.py inspectdb --database cosmo > schema.py
#########################################

# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey has `on_delete` set to the desired behavior.
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.

class Bricks(models.Model):
    id = models.BigIntegerField(primary_key=True)
    brickname = models.TextField(blank=True, null=True)
    brickid = models.IntegerField(blank=True, null=True)
    brickrow = models.IntegerField(blank=True, null=True)
    brickcol = models.IntegerField(blank=True, null=True)
    brickq = models.IntegerField(blank=True, null=True)
    ra = models.FloatField(blank=True, null=True)
    dec = models.FloatField(blank=True, null=True)
    ra1 = models.FloatField(blank=True, null=True)
    dec1 = models.FloatField(blank=True, null=True)
    ra2 = models.FloatField(blank=True, null=True)
    dec2 = models.FloatField(blank=True, null=True)
    nobs_med_g = models.IntegerField(blank=True, null=True)
    nobs_med_r = models.IntegerField(blank=True, null=True)
    nobs_med_z = models.IntegerField(blank=True, null=True)
    nobs_max_g = models.IntegerField(blank=True, null=True)
    nobs_max_r = models.IntegerField(blank=True, null=True)
    nobs_max_z = models.IntegerField(blank=True, null=True)
    filename = models.TextField(blank=True, null=True)
    tractorvr = models.TextField(blank=True, null=True)
    loaded = models.NullBooleanField()

    class Meta:
        managed = False
        db_table = 'bricks'


class Candidate(models.Model):
    id = models.BigIntegerField(primary_key=True)
    brickid = models.IntegerField(blank=True, null=True)
    objid = models.IntegerField(blank=True, null=True)
    blob = models.IntegerField(blank=True, null=True)
    ninblob = models.IntegerField(blank=True, null=True)
    tycho2inblob = models.NullBooleanField()
    type = models.TextField(blank=True, null=True)
    ra = models.FloatField(blank=True, null=True)
    ra_ivar = models.FloatField(blank=True, null=True)
    dec = models.FloatField(blank=True, null=True)
    dec_ivar = models.FloatField(blank=True, null=True)
    bx = models.FloatField(blank=True, null=True)
    by = models.FloatField(blank=True, null=True)
    bx0 = models.FloatField(blank=True, null=True)
    by0 = models.FloatField(blank=True, null=True)
    left_blob = models.NullBooleanField()
    out_of_bounds = models.NullBooleanField()
    ebv = models.FloatField(blank=True, null=True)
    dchisq1 = models.FloatField(blank=True, null=True)
    dchisq2 = models.FloatField(blank=True, null=True)
    dchisq3 = models.FloatField(blank=True, null=True)
    dchisq4 = models.FloatField(blank=True, null=True)
    dchisq5 = models.FloatField(blank=True, null=True)
    fracdev = models.FloatField(blank=True, null=True)
    fracdev_ivar = models.FloatField(blank=True, null=True)
    shapeexp_r = models.FloatField(blank=True, null=True)
    shapeexp_r_ivar = models.FloatField(blank=True, null=True)
    shapeexp_e1 = models.FloatField(blank=True, null=True)
    shapeexp_e1_ivar = models.FloatField(blank=True, null=True)
    shapeexp_e2 = models.FloatField(blank=True, null=True)
    shapeexp_e2_ivar = models.FloatField(blank=True, null=True)
    shapedev_r = models.FloatField(blank=True, null=True)
    shapedev_r_ivar = models.FloatField(blank=True, null=True)
    shapedev_e1 = models.FloatField(blank=True, null=True)
    shapedev_e1_ivar = models.FloatField(blank=True, null=True)
    shapedev_e2 = models.FloatField(blank=True, null=True)
    shapedev_e2_ivar = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'candidate'


class Decam(models.Model):
    id = models.BigIntegerField(primary_key=True)
    cand = models.ForeignKey(Candidate, models.DO_NOTHING, blank=True, null=True)
    uflux = models.FloatField(blank=True, null=True)
    uflux_ivar = models.FloatField(blank=True, null=True)
    ufracflux = models.FloatField(blank=True, null=True)
    ufracmasked = models.FloatField(blank=True, null=True)
    ufracin = models.FloatField(blank=True, null=True)
    u_rchi2 = models.FloatField(blank=True, null=True)
    unobs = models.IntegerField(blank=True, null=True)
    u_anymask = models.IntegerField(blank=True, null=True)
    u_allmask = models.IntegerField(blank=True, null=True)
    u_psfsize = models.FloatField(blank=True, null=True)
    u_ext = models.FloatField(blank=True, null=True)
    u_depth = models.FloatField(blank=True, null=True)
    u_galdepth = models.FloatField(blank=True, null=True)
    gflux = models.FloatField(blank=True, null=True)
    gflux_ivar = models.FloatField(blank=True, null=True)
    gfracflux = models.FloatField(blank=True, null=True)
    gfracmasked = models.FloatField(blank=True, null=True)
    gfracin = models.FloatField(blank=True, null=True)
    g_rchi2 = models.FloatField(blank=True, null=True)
    gnobs = models.IntegerField(blank=True, null=True)
    g_anymask = models.IntegerField(blank=True, null=True)
    g_allmask = models.IntegerField(blank=True, null=True)
    g_psfsize = models.FloatField(blank=True, null=True)
    g_ext = models.FloatField(blank=True, null=True)
    g_depth = models.FloatField(blank=True, null=True)
    g_galdepth = models.FloatField(blank=True, null=True)
    rflux = models.FloatField(blank=True, null=True)
    rflux_ivar = models.FloatField(blank=True, null=True)
    rfracflux = models.FloatField(blank=True, null=True)
    rfracmasked = models.FloatField(blank=True, null=True)
    rfracin = models.FloatField(blank=True, null=True)
    r_rchi2 = models.FloatField(blank=True, null=True)
    rnobs = models.IntegerField(blank=True, null=True)
    r_anymask = models.IntegerField(blank=True, null=True)
    r_allmask = models.IntegerField(blank=True, null=True)
    r_psfsize = models.FloatField(blank=True, null=True)
    r_ext = models.FloatField(blank=True, null=True)
    r_depth = models.FloatField(blank=True, null=True)
    r_galdepth = models.FloatField(blank=True, null=True)
    iflux = models.FloatField(blank=True, null=True)
    iflux_ivar = models.FloatField(blank=True, null=True)
    ifracflux = models.FloatField(blank=True, null=True)
    ifracmasked = models.FloatField(blank=True, null=True)
    ifracin = models.FloatField(blank=True, null=True)
    i_rchi2 = models.FloatField(blank=True, null=True)
    inobs = models.IntegerField(blank=True, null=True)
    i_anymask = models.IntegerField(blank=True, null=True)
    i_allmask = models.IntegerField(blank=True, null=True)
    i_psfsize = models.FloatField(blank=True, null=True)
    i_ext = models.FloatField(blank=True, null=True)
    i_depth = models.FloatField(blank=True, null=True)
    i_galdepth = models.FloatField(blank=True, null=True)
    zflux = models.FloatField(blank=True, null=True)
    zflux_ivar = models.FloatField(blank=True, null=True)
    zfracflux = models.FloatField(blank=True, null=True)
    zfracmasked = models.FloatField(blank=True, null=True)
    zfracin = models.FloatField(blank=True, null=True)
    z_rchi2 = models.FloatField(blank=True, null=True)
    znobs = models.IntegerField(blank=True, null=True)
    z_anymask = models.IntegerField(blank=True, null=True)
    z_allmask = models.IntegerField(blank=True, null=True)
    z_psfsize = models.FloatField(blank=True, null=True)
    z_ext = models.FloatField(blank=True, null=True)
    z_depth = models.FloatField(blank=True, null=True)
    z_galdepth = models.FloatField(blank=True, null=True)
    yflux = models.FloatField(blank=True, null=True)
    yflux_ivar = models.FloatField(blank=True, null=True)
    yfracflux = models.FloatField(blank=True, null=True)
    yfracmasked = models.FloatField(blank=True, null=True)
    yfracin = models.FloatField(blank=True, null=True)
    y_rchi2 = models.FloatField(blank=True, null=True)
    ynobs = models.IntegerField(blank=True, null=True)
    y_anymask = models.IntegerField(blank=True, null=True)
    y_allmask = models.IntegerField(blank=True, null=True)
    y_psfsize = models.FloatField(blank=True, null=True)
    y_ext = models.FloatField(blank=True, null=True)
    y_depth = models.FloatField(blank=True, null=True)
    y_galdepth = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'decam'


class DecamAper(models.Model):
    id = models.BigIntegerField(primary_key=True)
    cand = models.ForeignKey(Candidate, models.DO_NOTHING, blank=True, null=True)
    uapflux_1 = models.FloatField(blank=True, null=True)
    uapflux_2 = models.FloatField(blank=True, null=True)
    uapflux_3 = models.FloatField(blank=True, null=True)
    uapflux_4 = models.FloatField(blank=True, null=True)
    uapflux_5 = models.FloatField(blank=True, null=True)
    uapflux_6 = models.FloatField(blank=True, null=True)
    uapflux_7 = models.FloatField(blank=True, null=True)
    uapflux_8 = models.FloatField(blank=True, null=True)
    uapflux_resid_1 = models.FloatField(blank=True, null=True)
    uapflux_resid_2 = models.FloatField(blank=True, null=True)
    uapflux_resid_3 = models.FloatField(blank=True, null=True)
    uapflux_resid_4 = models.FloatField(blank=True, null=True)
    uapflux_resid_5 = models.FloatField(blank=True, null=True)
    uapflux_resid_6 = models.FloatField(blank=True, null=True)
    uapflux_resid_7 = models.FloatField(blank=True, null=True)
    uapflux_resid_8 = models.FloatField(blank=True, null=True)
    uapflux_ivar_1 = models.FloatField(blank=True, null=True)
    uapflux_ivar_2 = models.FloatField(blank=True, null=True)
    uapflux_ivar_3 = models.FloatField(blank=True, null=True)
    uapflux_ivar_4 = models.FloatField(blank=True, null=True)
    uapflux_ivar_5 = models.FloatField(blank=True, null=True)
    uapflux_ivar_6 = models.FloatField(blank=True, null=True)
    uapflux_ivar_7 = models.FloatField(blank=True, null=True)
    uapflux_ivar_8 = models.FloatField(blank=True, null=True)
    gapflux_1 = models.FloatField(blank=True, null=True)
    gapflux_2 = models.FloatField(blank=True, null=True)
    gapflux_3 = models.FloatField(blank=True, null=True)
    gapflux_4 = models.FloatField(blank=True, null=True)
    gapflux_5 = models.FloatField(blank=True, null=True)
    gapflux_6 = models.FloatField(blank=True, null=True)
    gapflux_7 = models.FloatField(blank=True, null=True)
    gapflux_8 = models.FloatField(blank=True, null=True)
    gapflux_resid_1 = models.FloatField(blank=True, null=True)
    gapflux_resid_2 = models.FloatField(blank=True, null=True)
    gapflux_resid_3 = models.FloatField(blank=True, null=True)
    gapflux_resid_4 = models.FloatField(blank=True, null=True)
    gapflux_resid_5 = models.FloatField(blank=True, null=True)
    gapflux_resid_6 = models.FloatField(blank=True, null=True)
    gapflux_resid_7 = models.FloatField(blank=True, null=True)
    gapflux_resid_8 = models.FloatField(blank=True, null=True)
    gapflux_ivar_1 = models.FloatField(blank=True, null=True)
    gapflux_ivar_2 = models.FloatField(blank=True, null=True)
    gapflux_ivar_3 = models.FloatField(blank=True, null=True)
    gapflux_ivar_4 = models.FloatField(blank=True, null=True)
    gapflux_ivar_5 = models.FloatField(blank=True, null=True)
    gapflux_ivar_6 = models.FloatField(blank=True, null=True)
    gapflux_ivar_7 = models.FloatField(blank=True, null=True)
    gapflux_ivar_8 = models.FloatField(blank=True, null=True)
    rapflux_1 = models.FloatField(blank=True, null=True)
    rapflux_2 = models.FloatField(blank=True, null=True)
    rapflux_3 = models.FloatField(blank=True, null=True)
    rapflux_4 = models.FloatField(blank=True, null=True)
    rapflux_5 = models.FloatField(blank=True, null=True)
    rapflux_6 = models.FloatField(blank=True, null=True)
    rapflux_7 = models.FloatField(blank=True, null=True)
    rapflux_8 = models.FloatField(blank=True, null=True)
    rapflux_resid_1 = models.FloatField(blank=True, null=True)
    rapflux_resid_2 = models.FloatField(blank=True, null=True)
    rapflux_resid_3 = models.FloatField(blank=True, null=True)
    rapflux_resid_4 = models.FloatField(blank=True, null=True)
    rapflux_resid_5 = models.FloatField(blank=True, null=True)
    rapflux_resid_6 = models.FloatField(blank=True, null=True)
    rapflux_resid_7 = models.FloatField(blank=True, null=True)
    rapflux_resid_8 = models.FloatField(blank=True, null=True)
    rapflux_ivar_1 = models.FloatField(blank=True, null=True)
    rapflux_ivar_2 = models.FloatField(blank=True, null=True)
    rapflux_ivar_3 = models.FloatField(blank=True, null=True)
    rapflux_ivar_4 = models.FloatField(blank=True, null=True)
    rapflux_ivar_5 = models.FloatField(blank=True, null=True)
    rapflux_ivar_6 = models.FloatField(blank=True, null=True)
    rapflux_ivar_7 = models.FloatField(blank=True, null=True)
    rapflux_ivar_8 = models.FloatField(blank=True, null=True)
    iapflux_1 = models.FloatField(blank=True, null=True)
    iapflux_2 = models.FloatField(blank=True, null=True)
    iapflux_3 = models.FloatField(blank=True, null=True)
    iapflux_4 = models.FloatField(blank=True, null=True)
    iapflux_5 = models.FloatField(blank=True, null=True)
    iapflux_6 = models.FloatField(blank=True, null=True)
    iapflux_7 = models.FloatField(blank=True, null=True)
    iapflux_8 = models.FloatField(blank=True, null=True)
    iapflux_resid_1 = models.FloatField(blank=True, null=True)
    iapflux_resid_2 = models.FloatField(blank=True, null=True)
    iapflux_resid_3 = models.FloatField(blank=True, null=True)
    iapflux_resid_4 = models.FloatField(blank=True, null=True)
    iapflux_resid_5 = models.FloatField(blank=True, null=True)
    iapflux_resid_6 = models.FloatField(blank=True, null=True)
    iapflux_resid_7 = models.FloatField(blank=True, null=True)
    iapflux_resid_8 = models.FloatField(blank=True, null=True)
    iapflux_ivar_1 = models.FloatField(blank=True, null=True)
    iapflux_ivar_2 = models.FloatField(blank=True, null=True)
    iapflux_ivar_3 = models.FloatField(blank=True, null=True)
    iapflux_ivar_4 = models.FloatField(blank=True, null=True)
    iapflux_ivar_5 = models.FloatField(blank=True, null=True)
    iapflux_ivar_6 = models.FloatField(blank=True, null=True)
    iapflux_ivar_7 = models.FloatField(blank=True, null=True)
    iapflux_ivar_8 = models.FloatField(blank=True, null=True)
    zapflux_1 = models.FloatField(blank=True, null=True)
    zapflux_2 = models.FloatField(blank=True, null=True)
    zapflux_3 = models.FloatField(blank=True, null=True)
    zapflux_4 = models.FloatField(blank=True, null=True)
    zapflux_5 = models.FloatField(blank=True, null=True)
    zapflux_6 = models.FloatField(blank=True, null=True)
    zapflux_7 = models.FloatField(blank=True, null=True)
    zapflux_8 = models.FloatField(blank=True, null=True)
    zapflux_resid_1 = models.FloatField(blank=True, null=True)
    zapflux_resid_2 = models.FloatField(blank=True, null=True)
    zapflux_resid_3 = models.FloatField(blank=True, null=True)
    zapflux_resid_4 = models.FloatField(blank=True, null=True)
    zapflux_resid_5 = models.FloatField(blank=True, null=True)
    zapflux_resid_6 = models.FloatField(blank=True, null=True)
    zapflux_resid_7 = models.FloatField(blank=True, null=True)
    zapflux_resid_8 = models.FloatField(blank=True, null=True)
    zapflux_ivar_1 = models.FloatField(blank=True, null=True)
    zapflux_ivar_2 = models.FloatField(blank=True, null=True)
    zapflux_ivar_3 = models.FloatField(blank=True, null=True)
    zapflux_ivar_4 = models.FloatField(blank=True, null=True)
    zapflux_ivar_5 = models.FloatField(blank=True, null=True)
    zapflux_ivar_6 = models.FloatField(blank=True, null=True)
    zapflux_ivar_7 = models.FloatField(blank=True, null=True)
    zapflux_ivar_8 = models.FloatField(blank=True, null=True)
    yapflux_1 = models.FloatField(blank=True, null=True)
    yapflux_2 = models.FloatField(blank=True, null=True)
    yapflux_3 = models.FloatField(blank=True, null=True)
    yapflux_4 = models.FloatField(blank=True, null=True)
    yapflux_5 = models.FloatField(blank=True, null=True)
    yapflux_6 = models.FloatField(blank=True, null=True)
    yapflux_7 = models.FloatField(blank=True, null=True)
    yapflux_8 = models.FloatField(blank=True, null=True)
    yapflux_resid_1 = models.FloatField(blank=True, null=True)
    yapflux_resid_2 = models.FloatField(blank=True, null=True)
    yapflux_resid_3 = models.FloatField(blank=True, null=True)
    yapflux_resid_4 = models.FloatField(blank=True, null=True)
    yapflux_resid_5 = models.FloatField(blank=True, null=True)
    yapflux_resid_6 = models.FloatField(blank=True, null=True)
    yapflux_resid_7 = models.FloatField(blank=True, null=True)
    yapflux_resid_8 = models.FloatField(blank=True, null=True)
    yapflux_ivar_1 = models.FloatField(blank=True, null=True)
    yapflux_ivar_2 = models.FloatField(blank=True, null=True)
    yapflux_ivar_3 = models.FloatField(blank=True, null=True)
    yapflux_ivar_4 = models.FloatField(blank=True, null=True)
    yapflux_ivar_5 = models.FloatField(blank=True, null=True)
    yapflux_ivar_6 = models.FloatField(blank=True, null=True)
    yapflux_ivar_7 = models.FloatField(blank=True, null=True)
    yapflux_ivar_8 = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'decam_aper'


class Wise(models.Model):
    id = models.BigIntegerField(primary_key=True)
    cand = models.ForeignKey(Candidate, models.DO_NOTHING, blank=True, null=True)
    w1flux = models.FloatField(blank=True, null=True)
    w1flux_ivar = models.FloatField(blank=True, null=True)
    w1fracflux = models.FloatField(blank=True, null=True)
    w1_rchi2 = models.FloatField(blank=True, null=True)
    w1nobs = models.IntegerField(blank=True, null=True)
    w1_ext = models.FloatField(blank=True, null=True)
    w2flux = models.FloatField(blank=True, null=True)
    w2flux_ivar = models.FloatField(blank=True, null=True)
    w2fracflux = models.FloatField(blank=True, null=True)
    w2_rchi2 = models.FloatField(blank=True, null=True)
    w2nobs = models.IntegerField(blank=True, null=True)
    w2_ext = models.FloatField(blank=True, null=True)
    w3flux = models.FloatField(blank=True, null=True)
    w3flux_ivar = models.FloatField(blank=True, null=True)
    w3fracflux = models.FloatField(blank=True, null=True)
    w3_rchi2 = models.FloatField(blank=True, null=True)
    w3nobs = models.IntegerField(blank=True, null=True)
    w3_ext = models.FloatField(blank=True, null=True)
    w4flux = models.FloatField(blank=True, null=True)
    w4flux_ivar = models.FloatField(blank=True, null=True)
    w4fracflux = models.FloatField(blank=True, null=True)
    w4_rchi2 = models.FloatField(blank=True, null=True)
    w4nobs = models.IntegerField(blank=True, null=True)
    w4_ext = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wise'

class Photom(models.Model):
    cand = models.ForeignKey(Candidate, models.DO_NOTHING,blank=True, null=True,
                                primary_key=True)
    ra = models.FloatField(blank=True, null=True)
    dec = models.FloatField(blank=True, null=True)
    g = models.FloatField(blank=True, null=True)
    r = models.FloatField(blank=True, null=True)
    z = models.FloatField(blank=True, null=True)
    w1 = models.FloatField(blank=True, null=True)
    w2 = models.FloatField(blank=True, null=True)
    w3 = models.FloatField(blank=True, null=True)
    w4 = models.FloatField(blank=True, null=True)
    gmr = models.FloatField(blank=True, null=True)
    rmz = models.FloatField(blank=True, null=True)
    zmw1 = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'photom'

class Target(models.Model):
    id = models.BigIntegerField(primary_key=True)
    cand_id = models.BigIntegerField(blank=True, null=True)
    ra = models.FloatField(blank=True, null=True)
    dec = models.FloatField(blank=True, null=True)
    type = models.TextField(blank=True)
    priority = models.SmallIntegerField(blank=True, null=True)
    nobs = models.SmallIntegerField(blank=True, null=True)
    version = models.TextField(blank=True)

    class Meta:
        managed = False
        db_table = 'target'

