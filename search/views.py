from django.shortcuts import render
from squrl import unsqurl
from django.http import HttpResponseRedirect, HttpResponse, StreamingHttpResponse
from django.db import connections
import numpy as np
from astropy.io import fits
from astropy.io.fits import Column

# Create your views here.


def api_search(request, query):
    result = unsqurl(query)
    if result['returncode'] == '200':
        #run the query
        cursor = connections['cosmo'].cursor()
        cursor.execute(result['sql'])
        rows = cursor.fetchall()
        #return FITS file
        priheader = fits.Header()
        priheader['COMMENT'] = "This file was generated by the Cosmo web portal."
        prihdu = fits.PrimaryHDU(header=priheader)
        # this works if the fields all map directly with no arrays
        # for i in range (0, nrows):
        #     for j in range (0, len(dtypes)):
        #         data[i][dtypes[j][0]] = rows[i][j]
        nrows = len(rows)
        if result['table'] == "DEFAULT":
            # try building from columns
            data = {'cand_id':[],'brick_id':[],'objid':[],'type':[],'ra':[],'dec':[],'decam_flux':[],'decam_flux_ivar':[],'decam_anymask':[],'wise_flux':[]}
            for i in range(0,nrows):
                data['cand_id'].append(rows[i][0])
                data['brick_id'].append(rows[i][3])
                data['objid'].append(rows[i][4])
                data['type'].append(rows[i][5])
                data['ra'].append(rows[i][6])
                data['dec'].append(rows[i][7])
                data['decam_flux'].append([rows[i][8],rows[i][9],rows[i][10],rows[i][11],rows[i][12],rows[i][13]])
                data['decam_flux_ivar'].append([rows[i][14],rows[i][15],rows[i][16],rows[i][17],rows[i][18],rows[i][19]])
                data['decam_anymask'].append([rows[i][20],rows[i][21],rows[i][22],rows[i][23],rows[i][24],rows[i][25]])
                data['wise_flux'].append([rows[i][26],rows[i][27],rows[i][28],rows[i][29]])

            c1 = Column(name='cand_id', format='J', array=data['cand_id'])
            c2 = Column(name='brick_id', format='I', array=data['brick_id'])
            c3 = Column(name='objid', format='I', array=data['objid'])
            c4 = Column(name='type', format='10A', array=data['type'])
            c5 = Column(name='ra', format='D', array=data['ra'])
            c6 = Column(name='dec', format='D', array=data['dec'])
            c7 = Column(name='decam_flux', format='6D', array=data['decam_flux'])
            c8 = Column(name='decam_flux_ivar', format='6D', array=data['decam_flux_ivar'])
            c9 = Column(name='decam_anymask', format='6D', array=data['decam_anymask'])
            c10 = Column(name='wise_flux', format='4D', array=data['wise_flux'])
            hdu = fits.BinTableHDU.from_columns([c1,c2,c3,c4,c5,c6,c7,c8,c9,c10])


        elif result['table'] == 'CANDIDATE':
            dtypes = [('brickid','i4'),('objid','i4'),
                ('blob','i8'),('type','S10'),('ra','float64'),('ra_ivar','float64'),('dec','float64'),('dec_ivar','float64'),('bx','float64'),
                ('by','float64'),('bx0','float64'),('by0','float64'),('ebv','float64'),('dchisq1','float64'),('dchisq2','float64'),('dchisq3','float64'),('dchisq4','float64'),
                ('fracdev','float64'),('fracdev_ivar','float64'),('shapeexp_r','float64'),('shapeexp_r_ivar','float64'),('shapeexp_e1','float64'),('shapeexp_e1_ivar','float64'),
                ('shapeexp_e2','float64'),('shapeexp_e2_ivar','float64'),('shapedev_r','float64'),('shapedev_r_ivar','float64'),('shapedev_e1','float64'),('shapedev_e1_ivar','float64'),
                ('shapedev_e2','float64'),('shapedev_e2_ivar','float64')]
            data = np.zeros(nrows, dtype=dtypes)
            for i in range(0,nrows):
                data[i]['brickid'] = rows[i][0]
                data[i]['objid'] = rows[i][1]
                data[i]['blob'] = rows[i][2]
                data[i]['type'] = str(rows[i][3])
                data[i]['ra'] = rows[i][4]
                data[i]['ra_ivar'] = rows[i][5]
                data[i]['dec'] = rows[i][6]
                data[i]['dec_ivar'] = rows[i][7]
                data[i]['bx'] = rows[i][8]
                data[i]['by'] = rows[i][9]
                data[i]['bx0'] = rows[i][10]
                data[i]['by0'] = rows[i][11]
                data[i]['ebv'] = rows[i][12]
                data[i]['dchisq1'] = rows[i][13]
                data[i]['dchisq2'] = rows[i][14]
                data[i]['dchisq3'] = rows[i][15]
                data[i]['dchisq4'] = rows[i][16]
                data[i]['fracdev'] = rows[i][17]
                data[i]['fracdev_ivar'] = rows[i][18]
                data[i]['shapeexp_r'] = rows[i][19]
                data[i]['shapeexp_r_ivar'] = rows[i][20]
                data[i]['shapeexp_e1'] = rows[i][21]
                data[i]['shapeexp_e1_ivar'] = rows[i][22]
                data[i]['shapeexp_e2'] = rows[i][23]
                data[i]['shapeexp_e2_ivar'] = rows[i][24]
                data[i]['shapedev_r'] = rows[i][25]
                data[i]['shapedev_r_ivar'] = rows[i][26]
                data[i]['shapedev_e1'] = rows[i][27]
                data[i]['shapedev_e1_ivar'] = rows[i][28]
                data[i]['shapedev_e2'] = rows[i][29]
                data[i]['shapedev_e2_ivar'] = rows[i][30]
            hdu = fits.BinTableHDU(data, header=priheader)
        elif result['table'] == 'DECAM':
            # try building from columns
            data = {'cand_id':[],'decam_flux':[],'decam_flux_ivar':[],'decam_fracflux':[],'decam_fracmasked':[],'decam_fracin':[],'decam_rchi2':[],'decam_nobs':[],'decam_anymask':[],'decam_allmask':[],'decam_ext':[]}
            for i in range(0,nrows):
                data['cand_id'].append(rows[i][0])
                data['decam_flux'].append([rows[i][1],rows[i][11],rows[i][21],rows[i][31],rows[i][41],rows[i][51]])
                data['decam_flux_ivar'].append([rows[i][2],rows[i][12],rows[i][22],rows[i][32],rows[i][42],rows[i][52]])
                data['decam_fracflux'].append([rows[i][3],rows[i][13],rows[i][23],rows[i][33],rows[i][43],rows[i][53]])
                data['decam_fracmasked'].append([rows[i][4],rows[i][14],rows[i][24],rows[i][34],rows[i][44],rows[i][54]])
                data['decam_fracin'].append([rows[i][5],rows[i][15],rows[i][25],rows[i][35],rows[i][45],rows[i][55]])
                data['decam_rchi2'].append([rows[i][6],rows[i][16],rows[i][26],rows[i][36],rows[i][46],rows[i][56]])
                data['decam_nobs'].append([rows[i][7],rows[i][17],rows[i][27],rows[i][37],rows[i][47],rows[i][57]])
                data['decam_anymask'].append([rows[i][8],rows[i][18],rows[i][28],rows[i][38],rows[i][48],rows[i][58]])
                data['decam_allmask'].append([rows[i][9],rows[i][19],rows[i][29],rows[i][39],rows[i][49],rows[i][59]])
                data['decam_ext'].append([rows[i][10],rows[i][20],rows[i][30],rows[i][40],rows[i][50],rows[i][60]])

            c1 = Column(name='cand_id', format='J', array=data['cand_id'])
            c2 = Column(name='decam_flux', format='6D', array=data['decam_flux'])
            c3 = Column(name='decam_flux_ivar', format='6D', array=data['decam_flux_ivar'])
            c4 = Column(name='decam_fracflux', format='6D', array=data['decam_fracflux'])
            c5 = Column(name='decam_fracmasked', format='6D', array=data['decam_fracmasked'])
            c6 = Column(name='decam_fracin', format='6D', array=data['decam_fracin'])
            c7 = Column(name='decam_rchi2', format='6D', array=data['decam_rchi2'])
            c8 = Column(name='decam_nobs', format='6D', array=data['decam_nobs'])
            c9 = Column(name='decam_anymask', format='6D', array=data['decam_anymask'])
            c10 = Column(name='decam_allmask', format='6D', array=data['decam_allmask'])
            c11 = Column(name='decam_ext', format='6D', array=data['decam_ext'])
            hdu = fits.BinTableHDU.from_columns([c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11])
            # dtypes = [('cand_id', 'i4'),('decam_flux',np.float64(6,)),
            #     ('decam_flux_ivar',np.float64(6,)),('decam_fracflux',np.float64(6,)),('decam_fracmasked',np.float64(6,)),('decam_fracin',np.float64(6,)),
            #     ('decam_rchi2',np.float64(6,)),('decam_nobs',np.float64(6,)),('decam_anymask',np.float64(6,)),('decam_allmask',np.float64(6,)),('decam_ext',np.float64(6,))]
            # data = np.zeros((nrows,6), dtype=dtypes)

        elif result['table'] == 'WISE':
            dtypes = [()]
            #line_cand = [ tbdata['brickid'][i], tbdata['objid'][i], tbdata['blob'][i], tbdata['type'][i], tbdata['ra'][i], tbdata['ra_ivar'][i], tbdata['dec'][i], tbdata['dec_ivar'][i], tbdata['bx'][i], tbdata['by'][i], tbdata['bx0'][i], tbdata['by0'][i], bool(lb), bool(oob), tbdata['ebv'][i], tbdata['dchisq'][i][0], tbdata['dchisq'][i][1], tbdata['dchisq'][i][2], tbdata['dchisq'][i][3], tbdata['fracDev'][i], tbdata['fracDev_ivar'][i], tbdata['shapeExp_r'][i], tbdata['shapeExp_r_ivar'][i], tbdata['shapeExp_e1'][i], tbdata['shapeExp_e1_ivar'][i], tbdata['shapeExp_e2'][i], tbdata['shapeExp_e2_ivar'][i], tbdata['shapeDev_r'][i], tbdata['shapeDev_r_ivar'][i], tbdata['shapeDev_e1'][i], tbdata['shapeDev_e1_ivar'][i], tbdata['shapeDev_e2'][i], tbdata['shapeDev_e2_ivar'][i] ]

            # for later
            # ('decam_flux','f8',(3,4)),('decam_flux_ivar','f8',(3,4)),('decam_apflux','f8',(3,4)),
            # ('decam_apflux_resid','f8',(3,4)),('decam_apflux_ivar','f8',(3,4)),('decam_mw_transmission','f8',(3,4)),
            # ('decam_nobs','f8',(3,4)),('decam_rchi2','f8',(3,4)),('decam_fracflux','f8',(3,4)),('decam_fracmasked','f8',(3,4)),
            # ('decam_fracin','f8',(3,4)),('decam_saturated','f8',(3,4)),('out_of_bounds','f8',(3,4)),('decam_anymask','f8',(3,4)),
            # ('decam_allmask','f8',(3,4))
            
        outfile = 'data.fits'

        fits.writeto(outfile, hdu.data, hdu.header, clobber=True)
        fsock = open(outfile,"rb")
        response = StreamingHttpResponse(fsock, content_type='application/fits')
        response['Content-Disposition'] = 'attachment; filename="' + outfile + '"'
        return response
    else:
        #return error
        return HttpResponse(result['error'])

def search_form(request):
    return render(request, "search.html")

def search_result(request):
    return HttpResponse("result here")

