from django.shortcuts import render
from squrl import unsqurl
from django.http import HttpResponseRedirect, HttpResponse
from django.db import connections
import numpy
import astropy.io.fits

# Create your views here.


def api_search(request, query):
    result = unsqurl(query)
    if result['returncode'] == '200':
        #run the query
        cursor = connections['cosmo'].cursor()
        cursor.execute(result['sql'])
        rows = cursor.fetchall()
        #return FITS file
        nrows = len(rows)
        data = numpy.zeros(nrows, dtype=[('brickid','i4'),('objid','i4'),
            ('blob','i8'),('type','S10'),('ra','float64'),('ra_ivar','float64'),('dec','float64'),('dec_ivar','float64'),('bx','float64'),
            ('by','float64'),('bx0','float64'),('by0','float64'),('ebv','float64'),('dchisq1','float64'),('dchisq2','float64'),('dchisq3','float64'),('dchisq4','float64'),
            ('fracdev','float64'),('fracdev_ivar','float64'),('shapeexp_r','float64'),('shapeexp_r_ivar','float64'),('shapeexp_e1','float64'),('shapeexp_e1_ivar','float64'),
            ('shapeexp_e2','float64'),('shapeexp_e2_ivar','float64'),('shapedev_r','float64'),('shapedev_r_ivar','float64'),('shapedev_e1','float64'),('shapedev_e1_ivar','float64'),
            ('shapedev_e2','float64'),('shapedev_e2_ivar','float64')])
            #line_cand = [ tbdata['brickid'][i], tbdata['objid'][i], tbdata['blob'][i], tbdata['type'][i], tbdata['ra'][i], tbdata['ra_ivar'][i], tbdata['dec'][i], tbdata['dec_ivar'][i], tbdata['bx'][i], tbdata['by'][i], tbdata['bx0'][i], tbdata['by0'][i], bool(lb), bool(oob), tbdata['ebv'][i], tbdata['dchisq'][i][0], tbdata['dchisq'][i][1], tbdata['dchisq'][i][2], tbdata['dchisq'][i][3], tbdata['fracDev'][i], tbdata['fracDev_ivar'][i], tbdata['shapeExp_r'][i], tbdata['shapeExp_r_ivar'][i], tbdata['shapeExp_e1'][i], tbdata['shapeExp_e1_ivar'][i], tbdata['shapeExp_e2'][i], tbdata['shapeExp_e2_ivar'][i], tbdata['shapeDev_r'][i], tbdata['shapeDev_r_ivar'][i], tbdata['shapeDev_e1'][i], tbdata['shapeDev_e1_ivar'][i], tbdata['shapeDev_e2'][i], tbdata['shapeDev_e2_ivar'][i] ]

            # for later
            # ('decam_flux','f8',(3,4)),('decam_flux_ivar','f8',(3,4)),('decam_apflux','f8',(3,4)),
            # ('decam_apflux_resid','f8',(3,4)),('decam_apflux_ivar','f8',(3,4)),('decam_mw_transmission','f8',(3,4)),
            # ('decam_nobs','f8',(3,4)),('decam_rchi2','f8',(3,4)),('decam_fracflux','f8',(3,4)),('decam_fracmasked','f8',(3,4)),
            # ('decam_fracin','f8',(3,4)),('decam_saturated','f8',(3,4)),('out_of_bounds','f8',(3,4)),('decam_anymask','f8',(3,4)),
            # ('decam_allmask','f8',(3,4))
            
        outfile = 'data.fits'
        priheader = astropy.io.fits.Header()
        priheader['COMMENT'] = "This file was generated by the Cosmo web portal."
        prihdu = astropy.io.fits.PrimaryHDU(header=priheader)
        # # header['TRACTORV'] = 
        # hdu = astropy.io.fits.BinTableHDU(header=header)
        # astropy.io.fits.writeto(outfile, hdu.header, clobber=True)
        for i in range (0, nrows):
            data[i]['brickid'] = rows[i][0]
            data[i]['objid'] = rows[i][1]
            data[i]['blob'] = rows[i][2]
            data[i]['type'] = str(rows[i][3])
            data[i]['ra'] = rows[i][4]
            data[i]['ra_ivar'] = rows[i][5]
            data[i]['dec'] = rows[i][6]
            data[i]['dec_ivar'] = rows[i][7]
            data[i]['bx'] = rows[i][8]
            data[i]['by'] = rows[i][9]
            data[i]['bx0'] = rows[i][10]
            data[i]['by0'] = rows[i][11]
            data[i]['ebv'] = rows[i][12]
            data[i]['dchisq1'] = rows[i][13]
            data[i]['dchisq2'] = rows[i][14]
            data[i]['dchisq3'] = rows[i][15]
            data[i]['dchisq4'] = rows[i][16]
            data[i]['fracdev'] = rows[i][17]
            data[i]['fracdev_ivar'] = rows[i][18]
            data[i]['shapeexp_r'] = rows[i][19]
            data[i]['shapeexp_r_ivar'] = rows[i][20]
            data[i]['shapeexp_e1'] = rows[i][21]
            data[i]['shapeexp_e1_ivar'] = rows[i][22]
            data[i]['shapeexp_e2'] = rows[i][23]
            data[i]['shapeexp_e2_ivar'] = rows[i][24]
            data[i]['shapedev_r'] = rows[i][25]
            data[i]['shapedev_r_ivar'] = rows[i][26]
            data[i]['shapedev_e1'] = rows[i][27]
            data[i]['shapedev_e1_ivar'] = rows[i][28]
            data[i]['shapedev_e2'] = rows[i][29]
            data[i]['shapedev_e2_ivar'] = rows[i][30]
        hdu = astropy.io.fits.BinTableHDU(data, header=priheader)
        astropy.io.fits.writeto(outfile, hdu.data, hdu.header, clobber=True)
        fsock = open(outfile,"rb")
        response = HttpResponse(fsock, content_type='application/fits')
        response['Content-Disposition'] = 'attachment; filename="' + outfile + '"'
        return response
    else:
        #return error
        return HttpResponse(result['error'])

def search_form(request, query):
    return HttpResponse("landed here")

def search_result(request):
    return HttpResponse("result here")

